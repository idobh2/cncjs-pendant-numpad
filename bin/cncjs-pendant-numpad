#!/usr/bin/env node

var fs = require("fs");
var path = require("path");
var program = require("commander");
var serialport = require("serialport");
var inquirer = require("inquirer");
var pkg = require("../package.json");
var serverMain = require("../index");
var hid = require("node-hid");
var options = {};

program
    .version(pkg.version)
    .usage("-s <secret> -p <port> [options]")
    .option("-l, --list", "list available ports then exit")
    .option("-s, --secret", "the secret key stored in the ~/.cncjs/cncrc.cfg file")
    .option("-p, --port <port>", "path or name of serial port")
    .option("-b, --baudrate <baudrate>", "baud rate (default: 115200)", 115200)
    .option(
        "--socket-address <address>",
        "socket address or hostname (default: localhost)",
        "localhost"
    )
    .option("--socket-port <port>", "socket port (default: 8000)", 8000)
    .option(
        "--controller-type <type>",
        "controller type: Grbl|Smoothie|TinyG (default: Grbl)",
        "Grbl"
    )
    .option(
        "--access-token-lifetime <lifetime>",
        "access token lifetime in seconds or a time span string (default: 30d)",
        "30d"
    )
    .option(
        "--probeoffset <offset>",
        "offset (thickness) for Z probe",
        '1.56'
    )
    .option(
        "--vendorid <vendor>",
        "Vendor ID of USB HID device"
    )
    .option(
        "--productid <product>",
        "Product ID of USB HID device"
    )
    .option(
        "--interface <interface>",
        "HID interface number (default: 1)",
        "1"
    )
    .option(
        "--key-mapping <file>",
        "Path to key mapping JSON file (default: keyboard-mapping.json)",
        "keyboard-mapping.json"
    );

program.parse(process.argv);

var options = {
    secret: program.secret,
    port: program.port,
    baudrate: program.baudrate,
    socketAddress: program.socketAddress,
    socketPort: program.socketPort,
    controllerType: program.controllerType,
    accessTokenLifetime: program.accessTokenLifetime,
    vendorid: program.vendorid,
    productid: program.productid,
    probeoffset: program.probeoffset,
    interface: parseInt(program.interface),
    keyMapping: program.keyMapping
};

// Load key mapping
var keyMapping = {};
try {
    if (fs.existsSync(options.keyMapping)) {
        const mappingData = JSON.parse(fs.readFileSync(options.keyMapping, 'utf8'));
        keyMapping = mappingData.keyMapping || {};
        console.log(`Loaded key mapping from: ${options.keyMapping}`);
        console.log(`Available keys: ${Object.keys(keyMapping).join(', ')}`);
    } else {
        console.warn(`Warning: Key mapping file not found: ${options.keyMapping}`);
        console.warn("Please create a mapping file using the map-keyboard.js script");
    }
} catch (error) {
    console.error(`Error loading key mapping file: ${error.message}`);
    process.exit(1);
}

if (options.list) {
    serialport.list().then((ports) => {
        ports.forEach(function (port) {
            console.log(port.path);
        });
    }).catch((err) => {
        if (err) {
            console.error(err);
            process.exit(1);
        }
    });
    return;
}

var store = {
    controller: {
        state: {},
        settings: {}
    },
    sender: {
        status: {}
    }
};

var kbdevent = {
    pressedKey: null, // Name of the currently pressed key
    move: 1, // Actually move size
    default_move: 1 // Alter by movement keys
};

function detectPressedKey(receivedData) {
    // Skip first byte (always 9), check bytes 1+ for non-zero values
    for (let i = 1; i < receivedData.length; i++) {
        if (receivedData[i] !== 0) {
            // Found a non-zero byte, check against key mappings
            for (const [keyName, mapping] of Object.entries(keyMapping)) {
                if (mapping.nonZeroBytes) {
                    // Check if this key's pattern matches
                    const matches = mapping.nonZeroBytes.some(expectedByte =>
                        expectedByte.position === i && expectedByte.value === receivedData[i]
                    );
                    if (matches) {
                        return keyName;
                    }
                }
            }
        }
    }
    return null; // No key detected or key released
}

var createServer = async function (options) {
    return new Promise((resolve, reject) => {
        serverMain(options, async function (err, socket) {
            if (err) {
                reject(err);
                return;
            }

            // Grbl
            socket.on("Grbl:state", function (state) {
                store.controller.state = state;
            });
            socket.on("Grbl:settings", function (settings) {
                store.controller.settings = settings;
            });

            // Smoothie
            socket.on("Smoothie:state", function (state) {
                store.controller.state = state;
            });
            socket.on("Smoothie:settings", function (settings) {
                store.controller.settings = settings;
            });

            // TinyG
            socket.on("TinyG:state", function (state) {
                store.controller.state = state;
            });
            socket.on("TinyG:settings", function (settings) {
                store.controller.settings = settings;
            });

            // Sender
            socket.on("sender:status", function (data) {
                store.sender.status = data;
            });

            console.log("Keyboard VID:PID is ", options.vendorId, options.productId);
            try {
                // Use async API to get devices
                const devices = await hid.devicesAsync();
                console.log("devices:\n", devices.map(item => JSON.stringify(item)).join("\n"));
                const findPath = interface =>
                    devices.find(
                        item =>
                            item.vendorId === options.vendorId &&
                            item.productId === options.productId &&
                            item.interface === interface
                    )?.path;

                console.log("Keyboard HID Address:", findPath(options.interface));

                // Use async API to open device
                const devicePath = findPath(options.interface);
                if (!devicePath) {
                    throw new Error(`HID device not found with VID:${options.vendorId} PID:${options.productId} Interface:${options.interface}`);
                }

                var keyboard_main = await hid.HIDAsync.open(devicePath);

                keyboard_main.on("data", function (data) {
                    var recv = data.toJSON().data;
                    console.log("recv: ", recv);

                    const detectedKey = detectPressedKey(recv);

                    if (detectedKey && detectedKey !== kbdevent.pressedKey) {
                        // New key pressed
                        kbdevent.pressedKey = detectedKey;
                        console.log("Key pressed:", detectedKey);
                        sendToController();
                    } else if (!detectedKey && kbdevent.pressedKey) {
                        // Key released
                        console.log("Key released:", kbdevent.pressedKey);
                        kbdevent.pressedKey = null;
                        // Note: We don't call sendToController on key release
                    }
                });

                keyboard_main.on("error", function (err) {
                    console.error("HID device error:", err);
                });

                resolve(socket);
            } catch (error) {
                console.error("Error setting up HID device:", error);
                reject(error);
            }

            function sendToController() {
                // Calculate move size modifiers
                kbdevent.move = kbdevent.default_move;

                console.log("Pressed key:", kbdevent.pressedKey);
                switch (kbdevent.pressedKey) {
                    case "8":
                    case "Up":
                        socket.emit(
                            "write",
                            options.port,
                            "G91 Y" + kbdevent.move + ";\n"
                        );
                        break;
                    case "2":
                    case "Down": // Y-
                        socket.emit(
                            "write",
                            options.port,
                            "G91 Y-" + kbdevent.move + ";\n"
                        );
                        break;
                    case "4":
                    case "Left": // X-
                        socket.emit(
                            "write",
                            options.port,
                            "G91 X-" + kbdevent.move + ";\n"
                        );
                        break;
                    case "6":
                    case "Right": // X+
                        socket.emit(
                            "write",
                            options.port,
                            "G91 X" + kbdevent.move + ";\n"
                        );
                        break;

                    case "Plus": // Z+
                        socket.emit(
                            "write",
                            options.port,
                            "G91 Z" + kbdevent.move + ";\n"
                        );
                        break;

                    case "Enter": // Z-
                        socket.emit(
                            "write",
                            options.port,
                            "G91 Z-" + kbdevent.move + ";\n"
                        );
                        break;

                    case "PageUp":
                        socket.emit("write", options.port, "G10 L20 P1 Z0;\n");
                        break;

                    case "PageDown":
                        // Probe Z
                        break;

                    case "Home":
                        socket.emit("write", options.port, "G10 L20 P1 X0;\n");
                        break;


                    case "End":
                        // Probe X
                        break;

                    case "Tab":
                        socket.emit("write", options.port, "G10 L20 P1 Y0;\n");
                        break;


                    case "Delete":
                        // Probe Y
                        break;

                    case "Backspace": // Unlock/reset
                        socket.emit("write", options.port, "$X\n");
                        break;

                    case "Slash": // Small movement (0.1)
                        kbdevent.default_move = 0.1;
                        break;
                    case "Asterisk": // Medium movement (1)
                        kbdevent.default_move = 1;
                        break;
                    case "Minus": // Large movement (10)
                        kbdevent.default_move = 10;
                        break;

                    default:
                        console.log("Unmapped key:", kbdevent.pressedKey);
                        break;
                }
            }
        });
    });
};

// console.log('List of connected devices (paths): ');
// console.log('devices:', hid.devices());

if (options.port) {
    createServer(options).catch((err) => {
        console.error("Error creating server:", err);
        process.exit(1);
    });
    return;
}

serialport.list().then((ports) => {
    const choices = ports.map(function (port) {
        return port.path;
    });

    inquirer
        .prompt([
            {
                type: "list",
                name: "port",
                message: "Specify which port you want to use?",
                choices: choices
            }
        ])
        .then(function (answers) {
            options.port = answers.port;

            createServer(options).catch((err) => {
                console.error("Error creating server:", err);
                process.exit(1);
            });
        });
}).catch((err) => {
    if (err) {
        console.error(err);
        process.exit(1);
    }
});
